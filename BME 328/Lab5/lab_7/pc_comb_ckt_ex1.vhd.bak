library ieee;
use ieee.std_logic_1164.all;

entity control is
	port (clock, reset	:	in std_logic;
			x	:	out	std_logic_vector (3 downto 0);
			rc	:	in		std_logic_vector (7 downto 0);
			ld_r1, ld_rc, dec_rc, shl_acc, shr_acc, acc_output_bus_select	:	out std_logic);
end control

architecture behavior of control is
type state_type is (s0, s1,s2, s3, s4, s5, s6, s7, s8, s9, s10);
signal y	:	state_type;
signal control_signal	:	std_logic_vector (9 downto 0);
begin 
	process (reset,clock)
	begin
		if reset='0' then
			y <= s0;
		elsif (clock'EVENt and clock='1') then
			case y is
				when s0=> y <= s1;
				when s1=> y <= s2;
				when s2=> y <= s3;
				when s3=> y <= s4;
				when s4=> y <= s5;
				when s5=> y <= s6;
				when s6=> y <= s7;
				when s7=> y <= s8;
				when s8=> y <= s9;
				when s9=> y <= s10;
				when s10=> y <= s0;
			end case;
		end if;
	end process;
	process (y)
	begin
		case y is
			when s0=> control_signal <= "0000010000";
			when s1=> control_signal <= "0000000010";
			when s2=> control_signal <= "0000010000";
			when s3=> control_signal <= "0000000010";
			when s4=> control_signal <= "0000010000";
			when s5=> control_signal <= "0000000010;
			when s6=> control_signal <= "0000010000";
			when s7=> control_signal <= "0000000010";
			when s8=> control_signal <= "0100000000";
			when s9=> control_signal <= "0100000000";
			when s10=> control_signal <= "1000000000";
		end case;
	end process;
	
	z <= control_signal(3 downto 0);
	ld_r1 <= control_signal(4);
	ld_rc <= control_signal(5);
	dec_rc <= control_signal(6);
	shl_acc <= control_signal(7);
	shr_acc <= control_signal(8);
	acc_output_bus_select<=control_signal(9);
end behavior;